{"ast":null,"code":"var _jsxFileName = \"/Users/austingreen/Documents/vscode/portfolio/client/src/components/ProcessCommandComponent.js\";\nimport * as Commands from \"./commands/index.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst processCommand = _ref => {\n  let {\n    inputValue,\n    clear,\n    contact\n  } = _ref;\n  // You can implement your own command processing logic here\n  // For this example, we'll just return a static output based on the command\n  //hello, whoami, help, clear, break, fix, about, portfolio, contact, skills, resume,\n  if (inputValue === \"about\") {\n    return /*#__PURE__*/_jsxDEV(Commands.About, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 12\n    }, this);\n  } else if (inputValue === \"clear\") {\n    clear();\n  } else if (inputValue === \"contact\") {\n    contact();\n  } else if (inputValue === \"help\") {\n    return /*#__PURE__*/_jsxDEV(Commands.Help, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 12\n    }, this);\n  } else if (inputValue === \"portfolio\") {\n    return /*#__PURE__*/_jsxDEV(Commands.Portfolio, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 12\n    }, this);\n  } else if (inputValue === \"resume\") {\n    return /*#__PURE__*/_jsxDEV(Commands.Resume, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 12\n    }, this);\n  } else if (inputValue === \"skills\") {\n    return /*#__PURE__*/_jsxDEV(Commands.Skills, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 12\n    }, this);\n  } else if (inputValue === \"whoami\") {\n    return /*#__PURE__*/_jsxDEV(Commands.Whoami, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 12\n    }, this);\n  } else if (inputValue === \"whoami\") {\n    return /*#__PURE__*/_jsxDEV(Commands.Whoami, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(Commands.Invalid, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 12\n    }, this);\n  }\n};\nexport default processCommand;","map":{"version":3,"names":["Commands","jsxDEV","_jsxDEV","processCommand","_ref","inputValue","clear","contact","About","fileName","_jsxFileName","lineNumber","columnNumber","Help","Portfolio","Resume","Skills","Whoami","Invalid"],"sources":["/Users/austingreen/Documents/vscode/portfolio/client/src/components/ProcessCommandComponent.js"],"sourcesContent":["import * as Commands from \"./commands/index.js\";\nconst processCommand = ({ inputValue, clear, contact }) => {\n  // You can implement your own command processing logic here\n  // For this example, we'll just return a static output based on the command\n  //hello, whoami, help, clear, break, fix, about, portfolio, contact, skills, resume,\n  if (inputValue === \"about\") {\n    return <Commands.About />;\n  } else if (inputValue === \"clear\") {\n    clear();\n  } else if (inputValue === \"contact\") {\n    contact();\n  } else if (inputValue === \"help\") {\n    return <Commands.Help />;\n  } else if (inputValue === \"portfolio\") {\n    return <Commands.Portfolio />;\n  } else if (inputValue === \"resume\") {\n    return <Commands.Resume />;\n  } else if (inputValue === \"skills\") {\n    return <Commands.Skills />;\n  } else if (inputValue === \"whoami\") {\n    return <Commands.Whoami />;\n  } else if (inputValue === \"whoami\") {\n    return <Commands.Whoami />;\n  } else {\n    return <Commands.Invalid />;\n  }\n};\n\nexport default processCommand;\n"],"mappings":";AAAA,OAAO,KAAKA,QAAQ,MAAM,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAChD,MAAMC,cAAc,GAAGC,IAAA,IAAoC;EAAA,IAAnC;IAAEC,UAAU;IAAEC,KAAK;IAAEC;EAAQ,CAAC,GAAAH,IAAA;EACpD;EACA;EACA;EACA,IAAIC,UAAU,KAAK,OAAO,EAAE;IAC1B,oBAAOH,OAAA,CAACF,QAAQ,CAACQ,KAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC3B,CAAC,MAAM,IAAIP,UAAU,KAAK,OAAO,EAAE;IACjCC,KAAK,CAAC,CAAC;EACT,CAAC,MAAM,IAAID,UAAU,KAAK,SAAS,EAAE;IACnCE,OAAO,CAAC,CAAC;EACX,CAAC,MAAM,IAAIF,UAAU,KAAK,MAAM,EAAE;IAChC,oBAAOH,OAAA,CAACF,QAAQ,CAACa,IAAI;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC1B,CAAC,MAAM,IAAIP,UAAU,KAAK,WAAW,EAAE;IACrC,oBAAOH,OAAA,CAACF,QAAQ,CAACc,SAAS;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC/B,CAAC,MAAM,IAAIP,UAAU,KAAK,QAAQ,EAAE;IAClC,oBAAOH,OAAA,CAACF,QAAQ,CAACe,MAAM;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC5B,CAAC,MAAM,IAAIP,UAAU,KAAK,QAAQ,EAAE;IAClC,oBAAOH,OAAA,CAACF,QAAQ,CAACgB,MAAM;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC5B,CAAC,MAAM,IAAIP,UAAU,KAAK,QAAQ,EAAE;IAClC,oBAAOH,OAAA,CAACF,QAAQ,CAACiB,MAAM;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC5B,CAAC,MAAM,IAAIP,UAAU,KAAK,QAAQ,EAAE;IAClC,oBAAOH,OAAA,CAACF,QAAQ,CAACiB,MAAM;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC5B,CAAC,MAAM;IACL,oBAAOV,OAAA,CAACF,QAAQ,CAACkB,OAAO;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC7B;AACF,CAAC;AAED,eAAeT,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}